@function em($target, $context: 16) {
  @return ($target / $context) * 1em;
}

// https://gist.github.com/webgefrickel/4530526
// usage:
// @include rem(font-size, 16px)
// @include rem(margin, 0 auto 10px)
// @include rem(padding, inherit)
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $default-browser-font-size: 10px;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $default-browser-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if $value == auto or $value == inherit {
      // auto or inherit - don't add px or rem
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $default-browser-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

@mixin link-colors($color, $hover: $color, $active: $color, $focus: $color) {
  color: $color;
  &:hover {
    color: $hover;
  }
  &:active {
    color: $active;
  }
  &:focus {
    color: $focus;
  }
}

@mixin inline-block {
  display: inline-block;
  vertical-align: middle;
  *vertical-align: auto;
  *zoom: 1;
  *display: inline;
}

@mixin appearance($appearance) {
  -webkit-appearance: $appearance;
  -moz-appearance: $appearance;
  appearance: $appearance;
}

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

@mixin element-invisible {
  position: absolute !important;
  height: 0;
  width: 0;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

@mixin module-size {
  width: 100/2*1%;
  height: 47vw;

  @include breakpoint($bp-small) {
    width: 100/3*1%;
    height: 30vw;
  }

  @include breakpoint($bp-medium) {
    width: 100/4*1%;
    height: 20vw;
  }

  @include breakpoint($bp-large) {
    width: 100/5*1%;
    height: 18vw;
  }

  @include breakpoint($bp-desktop) {
    width: $module-grid-image-width;
    height: $module-grid-image-height;
  }
}